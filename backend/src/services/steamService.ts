import axios from 'axios';

// === –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–õ–Ø –¢–ò–ü–ò–ó–ê–¶–ò–ò ===
export interface VerificationSuccess {
  steamId: string;
  rankTier: number;
  rankName: string;
  stars: number;
  division: string;
  platformDivision: string;
  divisionDetails: any;
  totalMatches: number;
  wins: number;
  losses: number;
  winRate: number;
  isEligible: boolean;
  eligibilityDetails: {
    meetsDivision: boolean;
    meetsMatches: boolean;
    requiredDivision: string;
    requiredMatches: number;
    hasEnoughData: boolean;
  };
  profile: {
    personaname: string;
    avatarfull: string;
    profileurl: string;
    realData: boolean;
    dataSource: string;
  };
  dataStatus: {
    hasRealData: boolean;
    dataSource: string;
    rankAvailable: boolean;
    matchesAvailable: boolean;
    isEstimated: boolean;
  };
  leaderboardRank?: number;
  // MMR –£–î–ê–õ–ï–ù
}

export interface VerificationNoData {
  steamId: string;
  rankTier: null;
  rankName: string;
  stars: number;
  division: string;
  platformDivision: string;
  isEligible: boolean;
  profile: {
    personaname: string;
    avatarfull: string;
    profileurl: string;
    realData: boolean;
    dataSource: string;
  };
  dataStatus: {
    hasRealData: boolean;
    error: string;
    rankAvailable: boolean;
    matchesAvailable: boolean;
    isEstimated: boolean;
  };
  instructions: string[];
}

export interface VerificationError {
  steamId: string;
  rankTier: null;
  rankName: string;
  stars: number;
  division: string;
  platformDivision: string;
  isEligible: boolean;
  profile: {
    personaname: string;
    avatarfull: string;
    profileurl: string;
    realData: boolean;
    dataSource: string;
  };
  dataStatus: {
    hasRealData: boolean;
    error: string;
    rankAvailable: boolean;
    matchesAvailable: boolean;
    isEstimated: boolean;
  };
  instructions: string[];
}

export type VerificationResult = VerificationSuccess | VerificationNoData | VerificationError;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
export function isVerificationSuccess(result: VerificationResult): result is VerificationSuccess {
  return result.dataStatus.hasRealData === true;
}

export function isVerificationNoData(result: VerificationResult): result is VerificationNoData {
  return !result.dataStatus.hasRealData && 'instructions' in result;
}

export function isVerificationError(result: VerificationResult): result is VerificationError {
  const dataStatus = result.dataStatus as any;
  return !result.dataStatus.hasRealData && dataStatus.error !== undefined;
}
// === –ö–û–ù–ï–¶ –ò–ù–¢–ï–†–§–ï–ô–°–û–í ===

export class SteamService {
  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SteamID –≤ Dota 2 account_id
  private static convertToDotaAccountId(steamId: string): string {
    try {
      const steamId64 = BigInt(steamId);
      const dotaAccountId = (steamId64 - BigInt(76561197960265728)).toString();
      console.log(`üîÑ SteamID ${steamId} ‚Üí Dota account_id: ${dotaAccountId}`);
      return dotaAccountId;
    } catch (error) {
      console.error('Error converting SteamID to Dota account_id:', error);
      return steamId;
    }
  }

  // –†–ï–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•
  static async verifyPlayer(steamId: string): Promise<VerificationResult> {
    try {
      console.log(`üîç Starting REAL verification for SteamID: ${steamId}`);
      
      // 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ Steam API
      const profile = await this.getPlayerProfile(steamId);
      console.log(`‚úÖ Steam profile: ${profile.personaname}`);
      
      // 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SteamID –≤ Dota account_id
      const dotaAccountId = this.convertToDotaAccountId(steamId);
      console.log(`üîÑ Using Dota account_id: ${dotaAccountId}`);
      
      // 3. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ OpenDota
      console.log(`üîÑ Trying to fetch REAL data from OpenDota...`);
      const realData = await this.getRealPlayerData(dotaAccountId);
      
      if (realData.success) {
        console.log(`‚úÖ REAL data obtained:`, {
          rankTier: realData.rankTier,
          rankName: realData.rankName,
          stars: realData.stars,
          matches: realData.totalMatches,
          winRate: realData.winRate
        });
        return this.formatRealDataResult(steamId, profile, realData);
      }
      
      // 4. –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - —Å–æ–æ–±—â–∞–µ–º –∏–≥—Ä–æ–∫—É
      console.log(`‚ùå No real data available: ${realData.error}`);
      return this.formatNoDataResult(steamId, profile, realData.error || 'UNKNOWN_ERROR');
      
    } catch (error) {
      console.error('Verification failed:', error);
      return this.formatErrorResult(steamId, error);
    }
  }

  // –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –ò–ó OPEN DOTA
  private static async getRealPlayerData(dotaAccountId: string) {
    try {
      console.log(`üìä Fetching OpenDota data for account_id: ${dotaAccountId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
      const playerResponse = await axios.get(
        `https://api.opendota.com/api/players/${dotaAccountId}`,
        { 
          timeout: 15000,
          validateStatus: (status) => status < 500
        }
      );

      console.log(`üì° OpenDota API response status: ${playerResponse.status}`);

      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
      if (playerResponse.status === 404) {
        return {
          success: false,
          error: 'PLAYER_NOT_FOUND',
          message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ OpenDota'
        };
      }

      // –ï—Å–ª–∏ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
      if (playerResponse.status !== 200) {
        return {
          success: false,
          error: 'API_ERROR',
          message: `OpenDota API error: ${playerResponse.status}`
        };
      }

      const playerData = playerResponse.data;
      const rankTier = playerData.rank_tier;
      
      console.log('üîç Analyzing OpenDota data:', {
        profile: playerData.profile ? 'available' : 'missing',
        rank_tier: rankTier,
        leaderboard_rank: playerData.leaderboard_rank
      });

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–±–µ–¥/–ø–æ—Ä–∞–∂–µ–Ω–∏–π
      const wlData = await this.getWinLossData(dotaAccountId);
      
      // –ï—Å–ª–∏ –Ω–µ—Ç rank_tier, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
      if (!rankTier) {
        return {
          success: false,
          error: 'NO_RANK_DATA',
          message: '–†–∞–Ω–≥ –∏–≥—Ä–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω'
        };
      }

      // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ä–∞–Ω–≥
      const rankInfo = this.decodeRankTier(rankTier);
      
      return {
        success: true,
        rankTier: rankTier,
        rankName: rankInfo.rankName,
        stars: rankInfo.stars,
        division: rankInfo.division,
        platformDivision: rankInfo.platformDivision,
        totalMatches: wlData.totalMatches,
        wins: wlData.wins,
        losses: wlData.losses,
        winRate: wlData.winRate,
        leaderboard_rank: playerData.leaderboard_rank,
        profile: playerData.profile
      };

    } catch (error: any) {
      console.error('OpenDota API error:', error.message);
      
      if (error.response?.status === 404) {
        return {
          success: false,
          error: 'PLAYER_NOT_FOUND',
          message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ OpenDota'
        };
      }
      
      return {
        success: false,
        error: 'API_ERROR',
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`
      };
    }
  }

  // –†–ê–°–®–ò–§–†–û–í–ö–ê RANK_TIER
  private static decodeRankTier(rankTier: number) {
    console.log(`üéØ Decoding rank_tier: ${rankTier}`);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —á–∏—Å–ª–æ –Ω–∞ –¥–µ—Å—è—Ç–∫–∏ –∏ –µ–¥–∏–Ω–∏—Ü—ã
    const rankDigit = Math.floor(rankTier / 10); // –ü–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ (—Ä–∞–Ω–≥)
    const starsDigit = rankTier % 10; // –í—Ç–æ—Ä–∞—è —Ü–∏—Ñ—Ä–∞ (–∑–≤–µ–∑–¥—ã)

    const rankInfo = {
      rankName: '',
      stars: starsDigit,
      division: '',
      platformDivision: '',
      description: ''
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–Ω–≥ –ø–æ –ø–µ—Ä–≤–æ–π —Ü–∏—Ñ—Ä–µ
    switch (rankDigit) {
      case 1:
        rankInfo.rankName = '–†–µ–∫—Ä—É—Ç';
        rankInfo.division = 'Herald';
        rankInfo.platformDivision = '1';
        rankInfo.description = '–†–µ–∫—Ä—É—Ç';
        break;
      case 2:
        rankInfo.rankName = '–°—Ç—Ä–∞–∂';
        rankInfo.division = 'Guardian';
        rankInfo.platformDivision = '2';
        rankInfo.description = '–°—Ç—Ä–∞–∂';
        break;
      case 3:
        rankInfo.rankName = '–†—ã—Ü–∞—Ä—å';
        rankInfo.division = 'Knight';
        rankInfo.platformDivision = '3';
        rankInfo.description = '–†—ã—Ü–∞—Ä—å';
        break;
      case 4:
        rankInfo.rankName = '–ì–µ—Ä–æ–π';
        rankInfo.division = 'Hero';
        rankInfo.platformDivision = '4';
        rankInfo.description = '–ì–µ—Ä–æ–π';
        break;
      case 5:
        rankInfo.rankName = '–õ–µ–≥–µ–Ω–¥–∞';
        rankInfo.division = 'Legend';
        rankInfo.platformDivision = '5';
        rankInfo.description = '–õ–µ–≥–µ–Ω–¥–∞';
        break;
      case 6:
        rankInfo.rankName = '–í–ª–∞—Å—Ç–µ–ª–∏–Ω';
        rankInfo.division = 'Archon';
        rankInfo.platformDivision = '6';
        rankInfo.description = '–í–ª–∞—Å—Ç–µ–ª–∏–Ω';
        break;
      case 7:
        rankInfo.rankName = '–ë–æ–∂–µ—Å—Ç–≤–æ';
        rankInfo.division = 'Divine';
        rankInfo.platformDivision = '7';
        rankInfo.description = '–ë–æ–∂–µ—Å—Ç–≤–æ';
        break;
      case 8:
        rankInfo.rankName = '–¢–∏—Ç–∞–Ω';
        rankInfo.division = 'Immortal';
        rankInfo.platformDivision = '8';
        rankInfo.description = '–¢–∏—Ç–∞–Ω';
        break;
      default:
        rankInfo.rankName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        rankInfo.division = 'Unknown';
        rankInfo.platformDivision = 'Unknown';
        rankInfo.description = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–Ω–≥';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –∫ –æ–ø–∏—Å–∞–Ω–∏—é
    if (starsDigit > 0 && rankDigit < 8) {
      rankInfo.description += ` ${starsDigit}‚≠ê`;
    }

    console.log(`üéØ Rank decoded: ${rankInfo.rankName} (${rankInfo.division}) -> –î–∏–≤–∏–∑–∏–æ–Ω ${rankInfo.platformDivision} ${starsDigit} stars`);
    
    return rankInfo;
  }

  // –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û–ë–ï–î/–ü–û–†–ê–ñ–ï–ù–ò–ô
  private static async getWinLossData(dotaAccountId: string) {
    try {
      const response = await axios.get(
        `https://api.opendota.com/api/players/${dotaAccountId}/wl`,
        { 
          timeout: 10000,
          validateStatus: (status) => status < 500
        }
      );

      if (response.status !== 200) {
        return {
          wins: 0,
          losses: 0,
          totalMatches: 0,
          winRate: 0
        };
      }

      const data = response.data;
      const wins = data.win || 0;
      const losses = data.lose || 0;
      const totalMatches = wins + losses;
      const winRate = totalMatches > 0 ? Math.round((wins / totalMatches) * 100) : 0;

      console.log(`üéÆ Win/Loss stats: ${wins}W ${losses}L (${winRate}%)`);
      
      return {
        wins,
        losses,
        totalMatches,
        winRate
      };
    } catch (error) {
      console.error('Error fetching win/loss data:', error);
      return {
        wins: 0,
        losses: 0,
        totalMatches: 0,
        winRate: 0
      };
    }
  }

  // –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
 private static formatRealDataResult(steamId: string, profile: any, realData: any): VerificationSuccess {
  const isEligible = this.checkEligibility(realData.division, realData.totalMatches);

  console.log(`‚úÖ REAL verification completed:`, {
    playerName: profile.personaname,
    rank: realData.rankName,
    division: realData.division,
    platformDivision: realData.platformDivision,
    stars: realData.stars,
    matches: realData.totalMatches,
    isEligible
    // MMR –£–î–ê–õ–ï–ù
  });

  return {
    steamId,
    rankTier: realData.rankTier,
    rankName: realData.rankName,
    stars: realData.stars,
    division: realData.division,
    platformDivision: realData.platformDivision,
    divisionDetails: this.getDivisionDetails(realData.division),
    totalMatches: realData.totalMatches,
    wins: realData.wins,
    losses: realData.losses,
    winRate: realData.winRate,
    isEligible,
    eligibilityDetails: {
      meetsDivision: this.isDivisionAllowed(realData.division),
      meetsMatches: realData.totalMatches >= 100,
      requiredDivision: '–¥–æ –í–ª–∞—Å—Ç–µ–ª–∏–Ω–∞',
      requiredMatches: 100,
      hasEnoughData: true
    },
    profile: {
      personaname: profile.personaname,
      avatarfull: profile.avatarfull,
      profileurl: profile.profileurl,
      realData: true,
      dataSource: 'opendota'
    },
    dataStatus: {
      hasRealData: true,
      dataSource: 'rank_tier',
      rankAvailable: true,
      matchesAvailable: realData.totalMatches > 0,
      isEstimated: false
    },
    leaderboardRank: realData.leaderboard_rank
    // MMR –£–î–ê–õ–ï–ù
  };
}

  // –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ö–û–ì–î–ê –î–ê–ù–ù–´–• –ù–ï–¢
  private static formatNoDataResult(steamId: string, profile: any, error: string): VerificationNoData {
    console.log(`‚ùå No data available: ${error}`);

    return {
      steamId,
      rankTier: null,
      rankName: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      stars: 0,
      division: 'Unknown',
      platformDivision: 'Unknown',
      isEligible: false,
      profile: {
        personaname: profile.personaname,
        avatarfull: profile.avatarfull,
        profileurl: profile.profileurl,
        realData: false,
        dataSource: 'none'
      },
      dataStatus: {
        hasRealData: false,
        error: error,
        rankAvailable: false,
        matchesAvailable: false,
        isEstimated: false
      },
      instructions: this.getInstructions(steamId, error)
    };
  }

  // –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ü–†–ò –û–®–ò–ë–ö–ï
  private static formatErrorResult(steamId: string, error: any): VerificationError {
    const profile = {
      personaname: 'Unknown',
      avatarfull: '',
      profileurl: ''
    };

    return {
      steamId,
      rankTier: null,
      rankName: '–û—à–∏–±–∫–∞',
      stars: 0,
      division: 'Unknown',
      platformDivision: 'Unknown',
      isEligible: false,
      profile: {
        personaname: 'Error',
        avatarfull: '',
        profileurl: '',
        realData: false,
        dataSource: 'error'
      },
      dataStatus: {
        hasRealData: false,
        error: 'SYSTEM_ERROR',
        rankAvailable: false,
        matchesAvailable: false,
        isEstimated: false
      },
      instructions: [
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞',
        'üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
      ]
    };
  }

  // –ü–†–û–í–ï–†–ö–ê ELIGIBILITY –î–õ–Ø –¢–£–†–ù–ò–†–û–í
  private static checkEligibility(division: string, totalMatches: number): boolean {
    const allowedDivisions = ['Herald', 'Guardian', 'Knight', 'Hero', 'Legend', 'Archon'];
    return allowedDivisions.includes(division) && totalMatches >= 100;
  }

  // –ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ù–û–ì–û –î–ò–í–ò–ó–ò–û–ù–ê
  private static isDivisionAllowed(division: string): boolean {
    const allowedDivisions = ['Herald', 'Guardian', 'Knight', 'Hero', 'Legend', 'Archon'];
    return allowedDivisions.includes(division);
  }

  // –î–ï–¢–ê–õ–ò –î–ò–í–ò–ó–ò–û–ù–ê
  private static getDivisionDetails(division: string) {
    const divisions: { [key: string]: any } = {
      'Herald': { 
        name: 'Herald', 
        minMatches: 100,
        color: 'bg-red-500',
        description: '–†–µ–∫—Ä—É—Ç',
        requirements: '–ú–∏–Ω–∏–º—É–º 100 –º–∞—Ç—á–µ–π'
      },
      'Guardian': { 
        name: 'Guardian', 
        minMatches: 100,
        color: 'bg-orange-500',
        description: '–°—Ç—Ä–∞–∂',
        requirements: '–ú–∏–Ω–∏–º—É–º 100 –º–∞—Ç—á–µ–π'
      },
      'Knight': { 
        name: 'Knight', 
        minMatches: 100,
        color: 'bg-yellow-500',
        description: '–†—ã—Ü–∞—Ä—å',
        requirements: '–ú–∏–Ω–∏–º—É–º 100 –º–∞—Ç—á–µ–π'
      },
      'Hero': { 
        name: 'Hero', 
        minMatches: 100,
        color: 'bg-green-500',
        description: '–ì–µ—Ä–æ–π',
        requirements: '–ú–∏–Ω–∏–º—É–º 100 –º–∞—Ç—á–µ–π'
      },
      'Legend': { 
        name: 'Legend', 
        minMatches: 100,
        color: 'bg-blue-500',
        description: '–õ–µ–≥–µ–Ω–¥–∞',
        requirements: '–ú–∏–Ω–∏–º—É–º 100 –º–∞—Ç—á–µ–π'
      },
      'Archon': { 
        name: 'Archon', 
        minMatches: 100,
        color: 'bg-purple-500',
        description: '–í–ª–∞—Å—Ç–µ–ª–∏–Ω',
        requirements: '–ú–∏–Ω–∏–º—É–º 100 –º–∞—Ç—á–µ–π'
      },
      'Divine': { 
        name: 'Divine', 
        minMatches: 100,
        color: 'bg-pink-500',
        description: '–ë–æ–∂–µ—Å—Ç–≤–æ',
        requirements: '–ú–∏–Ω–∏–º—É–º 100 –º–∞—Ç—á–µ–π'
      },
      'Immortal': { 
        name: 'Immortal', 
        minMatches: 100,
        color: 'bg-indigo-500',
        description: '–¢–∏—Ç–∞–Ω',
        requirements: '–ú–∏–Ω–∏–º—É–º 100 –º–∞—Ç—á–µ–π'
      },
      'Unknown': { 
        name: 'Unknown', 
        minMatches: 0,
        color: 'bg-gray-500',
        description: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        requirements: '–î–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã'
      }
    };

    return divisions[division] || divisions['Unknown'];
  }

  // –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ò–ì–†–û–ö–ê
  private static getInstructions(steamId: string, error: string) {
    const dotaAccountId = this.convertToDotaAccountId(steamId);
    const baseInstructions = [
      '1. üìã –í Dota 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ê–∫–∫–∞—É–Ω—Ç ‚Üí "–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ–º –≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π"',
      `2. üîÑ –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ: https://www.opendota.com/players/${dotaAccountId}/refresh`,
      '3. ‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–æ–≤–∞',
      `4. üîó –í–∞—à Dota ID: ${dotaAccountId}`
    ];

    if (error === 'PLAYER_NOT_FOUND') {
      baseInstructions.unshift('‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ OpenDota');
    } else if (error === 'NO_RANK_DATA') {
      baseInstructions.unshift('‚ùå –†–∞–Ω–≥ –∏–≥—Ä–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else if (error === 'API_ERROR') {
      baseInstructions.unshift('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    }

    return baseInstructions;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  static async getPlayerProfile(steamId: string) {
    try {
      if (!process.env.STEAM_API_KEY) {
        throw new Error('Steam API key not configured');
      }

      const response = await axios.get(
        `https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/`,
        {
          params: {
            key: process.env.STEAM_API_KEY,
            steamids: steamId
          }
        }
      );
      
      if (!response.data.response.players || response.data.response.players.length === 0) {
        throw new Error('Player not found');
      }
      
      return response.data.response.players[0];
    } catch (error) {
      console.error('Error fetching player profile:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∏–≤–∏–∑–∏–æ–Ω–æ–≤
  static getDivisions() {
    return [
      { 
        name: 'Herald', 
        minMatches: 100,
        color: 'bg-red-500',
        description: '–î–∏–≤–∏–∑–∏–æ–Ω 1',
        requirements: '–ú–∏–Ω–∏–º—É–º 100 –º–∞—Ç—á–µ–π'
      },
      { 
        name: 'Guardian', 
        minMatches: 100,
        color: 'bg-orange-500',
        description: '–î–∏–≤–∏–∑–∏–æ–Ω 2',
        requirements: '–ú–∏–Ω–∏–º—É–º 100 –º–∞—Ç—á–µ–π'
      },
      { 
        name: 'Knight', 
        minMatches: 100,
        color: 'bg-yellow-500',
        description: '–î–∏–≤–∏–∑–∏–æ–Ω 3',
        requirements: '–ú–∏–Ω–∏–º—É–º 100 –º–∞—Ç—á–µ–π'
      },
      { 
        name: 'Hero', 
        minMatches: 100,
        color: 'bg-green-500',
        description: '–î–∏–≤–∏–∑–∏–æ–Ω 4',
        requirements: '–ú–∏–Ω–∏–º—É–º 100 –º–∞—Ç—á–µ–π'
      },
      { 
        name: 'Legend', 
        minMatches: 100,
        color: 'bg-blue-500',
        description: '–î–∏–≤–∏–∑–∏–æ–Ω 5',
        requirements: '–ú–∏–Ω–∏–º—É–º 100 –º–∞—Ç—á–µ–π'
      },
      { 
        name: 'Archon', 
        minMatches: 100,
        color: 'bg-purple-500',
        description: '–î–∏–≤–∏–∑–∏–æ–Ω 6',
        requirements: '–ú–∏–Ω–∏–º—É–º 100 –º–∞—Ç—á–µ–π'
      }
    ];
  }
}