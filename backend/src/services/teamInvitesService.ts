import { db } from '../database/database';
import { TeamInvite, TeamInviteWithDetails } from '../models/friends';

export class TeamInvitesService {
  // –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É
  static async invitePlayerToTeam(
    teamId: string, 
    invitedUserId: string, 
    invitedByUserId: string
  ): Promise<TeamInvite> {
    console.log('üéØ TeamInvitesService.invitePlayerToTeam called with:', { teamId, invitedUserId, invitedByUserId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–∏–π - –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã
    console.log('üîç Checking if user is captain of team...');
    const team = await db.get(
      `SELECT t.*, tm.user_id as captain_id 
       FROM teams t
       INNER JOIN team_members tm ON t.id = tm.team_id 
       WHERE t.id = ? AND tm.role = 'captain'`,
      [teamId]
    );
    
    console.log('üìä Team query result:', team);

    if (!team) {
      throw new Error('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (team.captain_id !== invitedByUserId) {
      throw new Error('–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –ª–∏ —É–∂–µ
    const existingInvite = await db.get(
      'SELECT * FROM team_invites WHERE team_id = ? AND invited_user_id = ? AND status = "pending"',
      [teamId, invitedUserId]
    );

    if (existingInvite) {
      throw new Error('–ò–≥—Ä–æ–∫ —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ –ª–∏ —É–∂–µ
    const existingMember = await db.get(
      'SELECT * FROM team_members WHERE team_id = ? AND user_id = ?',
      [teamId, invitedUserId]
    );

    if (existingMember) {
      throw new Error('–ò–≥—Ä–æ–∫ —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥—ã (5 –∏–≥—Ä–æ–∫–æ–≤)
    const memberCount = await db.get(
      'SELECT COUNT(*) as count FROM team_members WHERE team_id = ?',
      [teamId]
    ) as { count: number };

    if (memberCount.count >= 5) {
      throw new Error('–í –∫–æ–º–∞–Ω–¥–µ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (5)');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø—Ä–∏–≥–ª–∞—à–∞–µ–º–æ–≥–æ –µ—Å—Ç—å Steam –∞–∫–∫–∞—É–Ω—Ç
    const userSteamConnection = await db.get(
      'SELECT * FROM user_steam_connections WHERE user_id = ?',
      [invitedUserId]
    );

    if (!userSteamConnection) {
      throw new Error('–£ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω Steam –∞–∫–∫–∞—É–Ω—Ç');
    }

    const inviteId = `invite_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 –¥–Ω–µ–π

    await db.run(
      `INSERT INTO team_invites (
        id, team_id, invited_user_id, invited_by_user_id, 
        status, created_at, expires_at
      ) VALUES (?, ?, ?, ?, 'pending', datetime('now'), ?)`,
      [inviteId, teamId, invitedUserId, invitedByUserId, expiresAt.toISOString()]
    );

    return await db.get('SELECT * FROM team_invites WHERE id = ?', [inviteId]) as TeamInvite;
  }

  // –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
  static async acceptTeamInvite(userId: string, inviteId: string): Promise<void> {
    const invite = await db.get(
      'SELECT * FROM team_invites WHERE id = ? AND invited_user_id = ? AND status = "pending"',
      [inviteId, userId]
    );

    if (!invite) {
      throw new Error('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    if (new Date(invite.expires_at) < new Date()) {
      await db.run(
        'UPDATE team_invites SET status = "expired" WHERE id = ?',
        [inviteId]
      );
      throw new Error('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥—ã –µ—â–µ —Ä–∞–∑
    const memberCount = await db.get(
      'SELECT COUNT(*) as count FROM team_members WHERE team_id = ?',
      [invite.team_id]
    ) as { count: number };

    if (memberCount.count >= 5) {
      throw new Error('–í –∫–æ–º–∞–Ω–¥–µ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
    const memberId = `member_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    await db.run(
      `INSERT INTO team_members (id, team_id, user_id, steam_connection_id, role, join_date)
       SELECT ?, ?, ?, usc.id, 'member', datetime('now')
       FROM user_steam_connections usc 
       WHERE usc.user_id = ?`,
      [memberId, invite.team_id, userId, userId]
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    await db.run(
      'UPDATE team_invites SET status = "accepted" WHERE id = ?',
      [inviteId]
    );

    // –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
    await db.run(
      'UPDATE team_invites SET status = "rejected" WHERE invited_user_id = ? AND status = "pending" AND id != ?',
      [userId, inviteId]
    );
  }

  // –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
  static async rejectTeamInvite(userId: string, inviteId: string): Promise<void> {
    const invite = await db.get(
      'SELECT * FROM team_invites WHERE id = ? AND invited_user_id = ? AND status = "pending"',
      [inviteId, userId]
    );

    if (!invite) {
      throw new Error('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
    }

    await db.run(
      'UPDATE team_invites SET status = "rejected" WHERE id = ?',
      [inviteId]
    );
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async getUserInvites(userId: string): Promise<TeamInviteWithDetails[]> {
    const invites = await db.all<any>(
      `SELECT 
        ti.*,
        t.name as teamName,
        t.tag as teamTag,
        pu.username as invitedByUsername,
        pu2.username as invitedUsername
      FROM team_invites ti
      INNER JOIN teams t ON ti.team_id = t.id
      INNER JOIN platform_users pu ON ti.invited_by_user_id = pu.id
      INNER JOIN platform_users pu2 ON ti.invited_user_id = pu2.id
      WHERE ti.invited_user_id = ? AND ti.status = 'pending'
      ORDER BY ti.created_at DESC`,
      [userId]
    );

    return invites.map(i => ({
      id: i.id,
      teamId: i.team_id,
      invitedUserId: i.invited_user_id,
      invitedByUserId: i.invited_by_user_id,
      status: i.status,
      createdAt: new Date(i.created_at),
      expiresAt: new Date(i.expires_at),
      teamName: i.teamName,
      teamTag: i.teamTag,
      invitedByUsername: i.invitedByUsername,
      invitedUsername: i.invitedUsername
    }));
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (–¥–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞)
  static async getTeamInvites(teamId: string, captainUserId: string): Promise<TeamInviteWithDetails[]> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã
    const team = await db.get(
      `SELECT t.*, tm.user_id as captain_id 
       FROM teams t
       INNER JOIN team_members tm ON t.id = tm.team_id 
       WHERE t.id = ? AND tm.role = 'captain'`,
      [teamId]
    );

    if (!team || team.captain_id !== captainUserId) {
      throw new Error('–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
    }

    const invites = await db.all<any>(
      `SELECT 
        ti.*,
        t.name as teamName,
        t.tag as teamTag,
        pu.username as invitedByUsername,
        pu2.username as invitedUsername
      FROM team_invites ti
      INNER JOIN teams t ON ti.team_id = t.id
      INNER JOIN platform_users pu ON ti.invited_by_user_id = pu.id
      INNER JOIN platform_users pu2 ON ti.invited_user_id = pu2.id
      WHERE ti.team_id = ?
      ORDER BY ti.created_at DESC`,
      [teamId]
    );

    return invites.map(i => ({
      id: i.id,
      teamId: i.team_id,
      invitedUserId: i.invited_user_id,
      invitedByUserId: i.invited_by_user_id,
      status: i.status,
      createdAt: new Date(i.created_at),
      expiresAt: new Date(i.expires_at),
      teamName: i.teamName,
      teamTag: i.teamTag,
      invitedByUsername: i.invitedByUsername,
      invitedUsername: i.invitedUsername
    }));
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ)
  static async cancelTeamInvite(inviteId: string, captainUserId: string): Promise<void> {
    const invite = await db.get(
      'SELECT * FROM team_invites WHERE id = ? AND invited_by_user_id = ? AND status = "pending"',
      [inviteId, captainUserId]
    );

    if (!invite) {
      throw new Error('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
    }

    await db.run(
      'UPDATE team_invites SET status = "rejected" WHERE id = ?',
      [inviteId]
    );
  }
}
