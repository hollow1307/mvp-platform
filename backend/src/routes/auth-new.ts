import express from 'express';
import passport from 'passport';
import { UserService } from '../services/userService';
import { UserRepository } from '../models/user';
import { SteamService } from '../services/steamService';
import { config } from '../config/environment';
import { getRankInfo, isRankEligible, getIneligibilityMessage } from '../utils/rankUtils';

const router = express.Router();

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
router.get('/test', (req, res) => {
  res.json({ 
    message: 'New auth system is working!',
    timestamp: new Date().toISOString()
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/user', async (req, res) => {
  try {
    const userId = (req.session as any).userId;
    
    console.log('üîç GET /user - Session check:', {
      hasSession: !!req.session,
      sessionID: req.sessionID,
      userId: userId,
      cookies: req.headers.cookie,
      allSessionData: req.session
    });
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: 'Not authenticated'
      });
    }

    const userWithConnections = await UserService.getUserWithConnections(userId);
    
    if (!userWithConnections) {
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    }

    res.json({
      success: true,
      user: {
        id: userWithConnections.id,
        email: userWithConnections.email,
        username: userWithConnections.username,
        role: userWithConnections.role,
        steamConnections: userWithConnections.steamConnections
      }
    });
  } catch (error: any) {
    console.error('Get user error:', error.message);
    res.status(500).json({
      success: false,
      error: 'Failed to get user data'
    });
  }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ email/–ø–∞—Ä–æ–ª—å
router.post('/register', async (req, res) => {
  try {
    const { email, username, password } = req.body;

    console.log('üìù Registration attempt:', { email, username });

    if (!email || !username || !password) {
      return res.status(400).json({
        success: false,
        error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
      });
    }

    if (password.length < 6) {
      return res.status(400).json({
        success: false,
        error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤'
      });
    }

    const user = await UserService.registerUser(email, username, password);
    
    console.log('‚úÖ User registered successfully:', user.username);

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    (req.session as any).userId = user.id;

    res.status(201).json({
      success: true,
      message: '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      user: {
        id: user.id,
        email: user.email,
        username: user.username,
        role: user.role
      }
    });
  } catch (error: any) {
    console.error('‚ùå Registration error:', error.message);
    res.status(400).json({
      success: false,
      error: error.message
    });
  }
});

// –í—Ö–æ–¥ —á–µ—Ä–µ–∑ email/–ø–∞—Ä–æ–ª—å
router.post('/login', async (req, res) => {
  try {
    const { emailOrUsername, password } = req.body;

    console.log('üîê Login attempt:', { emailOrUsername });

    const user = await UserService.authenticateUser(emailOrUsername, password);
    if (!user) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email/username –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      });
    }

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    (req.session as any).userId = user.id;
    
    console.log('‚úÖ User logged in:', {
      username: user.username,
      userId: user.id,
      sessionID: req.sessionID,
      sessionData: req.session
    });

    res.json({
      success: true,
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      user: {
        id: user.id,
        email: user.email,
        username: user.username,
        role: user.role
      }
    });
  } catch (error: any) {
    console.error('‚ùå Login error:', error.message);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É'
    });
  }
});

// –í—ã—Ö–æ–¥
router.post('/logout', (req, res) => {
  try {
    console.log('üëã User logging out');
    
    req.session.destroy((err) => {
      if (err) {
        console.error('Logout error:', err);
        return res.status(500).json({
          success: false,
          error: 'Logout failed'
        });
      }
      
      res.json({
        success: true,
        message: 'Logged out successfully'
      });
    });
  } catch (error: any) {
    console.error('Logout error:', error.message);
    res.status(500).json({
      success: false,
      error: 'Logout failed'
    });
  }
});

// –ü—Ä–∏–≤—è–∑–∫–∞ Steam –∞–∫–∫–∞—É–Ω—Ç–∞ - –û–ë–ù–û–í–õ–ï–ù–û –ë–ï–ó MMR
router.post('/steam/connect', async (req, res) => {
  try {
    const userId = (req.session as any).userId;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    const { steamId } = req.body;

    if (!steamId) {
      return res.status(400).json({
        success: false,
        error: 'SteamID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    console.log('üîó Steam connection attempt:', { userId, steamId });
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å Steam
    const steamProfile = await SteamService.getPlayerProfile(steamId);
    
    // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞
    const verification = await SteamService.verifyPlayer(steamId);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–Ω–≥–µ
    const rankInfo = getRankInfo(verification.rankTier);
    const eligible = isRankEligible(verification.rankTier);
    const ineligibilityMessage = getIneligibilityMessage(verification.rankTier);
    
    console.log('üìä Rank verification:', {
      rankTier: verification.rankTier,
      rankName: rankInfo?.name,
      eligible,
      message: ineligibilityMessage
    });

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    const connection = await UserService.connectSteamAccount(
      userId,
      {
        steamId,
        username: steamProfile.personaname,
        avatar: {
          large: steamProfile.avatarfull
        },
        profileUrl: steamProfile.profileurl
      },
      verification
    );

    console.log('‚úÖ Steam account connected:', connection.steamUsername);

    res.json({
      success: true,
      message: 'Steam –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω',
      connection: {
        id: connection.id,
        steamUsername: connection.steamUsername,
        isVerified: connection.isVerified,
        rankTier: connection.rankTier,
        rankName: connection.rankName,
        rankInfo: rankInfo,
        isEligible: eligible,
        ineligibilityMessage: ineligibilityMessage,
        totalMatches: connection.totalMatches
      }
    });
  } catch (error: any) {
    console.error('‚ùå Steam connection error:', error.message);
    res.status(400).json({
      success: false,
      error: error.message
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/check-username/:username', async (req, res) => {
  try {
    const { username } = req.params;

    if (!username || username.length < 3) {
      return res.json({
        available: false,
        message: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤'
      });
    }

    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –ë–î
    const available = true; // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞

    res.json({
      available,
      message: available ? '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ' : '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω—è—Ç–æ'
    });
  } catch (error: any) {
    console.error('Check username error:', error.message);
    res.status(500).json({
      available: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ Steam –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
router.post('/create-session', async (req, res) => {
  try {
    const { userId } = req.body;

    if (!userId) {
      return res.status(400).json({
        success: false,
        error: 'UserID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    console.log('üîê Creating session for user:', userId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const user = await UserService.getUserWithConnections(userId);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    (req.session as any).userId = userId;

    console.log('‚úÖ Session created successfully for user:', user.username);

    res.json({
      success: true,
      message: '–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      user: {
        id: user.id,
        email: user.email,
        username: user.username,
        role: user.role,
        steamConnections: user.steamConnections
      }
    });
  } catch (error: any) {
    console.error('Create session error:', error.message);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏'
    });
  }
});

// Steam –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –∏–Ω–∏—Ü–∏–∞—Ü–∏—è
router.get('/steam', passport.authenticate('steam', { 
  session: false, // –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏–∏ Passport
  failureRedirect: `${config.corsOrigin}/auth?error=steam_auth_failed` 
}));

// Steam –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—Ç
router.get('/steam/return', 
  passport.authenticate('steam', { 
    session: false, // –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏–∏ Passport
    failureRedirect: `${config.corsOrigin}/auth?error=steam_auth_failed` 
  }),
  async (req, res) => {
    try {
      const user = (req as any).user;
      
      if (!user || !user.steamId) {
        return res.redirect(`${config.corsOrigin}/auth?error=steam_user_not_found`);
      }

      console.log('üéÆ Steam auth return:', {
        steamUser: user.username,
        steamId: user.steamId,
        hasSession: !!req.session,
        sessionID: req.sessionID,
        currentUserId: (req.session as any).userId,
        cookies: req.headers.cookie
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Steam –∞–∫–∫–∞—É–Ω—Ç–æ–º
      const existingConnection = await UserRepository.findSteamConnectionBySteamId(user.steamId);
      
      if (existingConnection) {
        // –ï—Å–ª–∏ Steam –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω, –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const platformUser = await UserRepository.findUserById(existingConnection.userId);
        if (platformUser) {
          // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
          (req.session as any).userId = platformUser.id;
          
          console.log('‚úÖ Existing Steam user logged in:', {
            username: platformUser.username,
            userId: platformUser.id,
            sessionID: req.sessionID
          });
          return res.redirect(`${config.corsOrigin}/profile`);
        }
      }

      // –ï—Å–ª–∏ Steam –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–≤—è–∑–∫–∏
      console.log('‚ö†Ô∏è Steam not bound, redirecting to bind page. Session userId:', (req.session as any).userId);
      return res.redirect(`${config.corsOrigin}/auth/steam-bind?steamId=${user.steamId}&steamUsername=${encodeURIComponent(user.username)}`);
      
    } catch (error: any) {
      console.error('‚ùå Steam return error:', error.message);
      res.redirect(`${config.corsOrigin}/auth?error=steam_processing_failed`);
    }
  }
);

// –û—Ç–≤—è–∑–∫–∞ Steam –∞–∫–∫–∞—É–Ω—Ç–∞
router.delete('/steam/disconnect/:steamId', async (req, res) => {
  try {
    const userId = (req.session as any).userId;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    const { steamId } = req.params;

    console.log('üîó Disconnecting Steam account:', { userId, steamId });

    const db = await import('../database/database').then(m => m.db);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —ç—Ç–æ—Ç Steam –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const connection = await new Promise<any>((resolve, reject) => {
      db.get(
        'SELECT * FROM user_steam_connections WHERE steam_id = ? AND user_id = ?',
        [steamId, userId]
      ).then((row: any) => resolve(row))
        .catch((err: any) => reject(err));
    });

    if (!connection) {
      return res.status(404).json({
        success: false,
        error: 'Steam –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º'
      });
    }

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å
    const result = await new Promise<any>((resolve, reject) => {
      db.run(
        'DELETE FROM user_steam_connections WHERE steam_id = ? AND user_id = ?',
        [steamId, userId]
      ).then((result: any) => resolve(result))
        .catch((err: any) => reject(err));
    });

    console.log('‚úÖ Steam account disconnected:', {
      steamId,
      userId,
      changes: result?.changes || 'unknown'
    });

    res.json({
      success: true,
      message: 'Steam –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω'
    });
  } catch (error: any) {
    console.error('‚ùå Disconnect Steam error:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

export default router;