import express from 'express';
import { TeamService } from '../services/teamService';
import { FriendsService } from '../services/friendsService';
import { TeamRepository } from '../repositories/teamRepository';

const router = express.Router();

// üîß –í–ê–ñ–ù–û: –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –í–´–®–ï –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö!

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
router.get('/test', async (req, res) => {
  try {
    res.json({
      success: true,
      message: 'Teams API is working correctly!',
      timestamp: new Date().toISOString(),
      endpoints: {
        'GET /api/teams/my': 'Get user teams',
        'POST /api/teams/create': 'Create new team',
        'GET /api/teams/:teamId': 'Get team details'
      }
    });
  } catch (error: any) {
    res.status(500).json({
      success: false,
      error: 'Teams test failed'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/my', async (req, res) => {
  try {
    const userId = (req.session as any).userId;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    const teams = await TeamService.getUserTeams(userId);
    
    res.json({
      success: true,
      teams
    });
  } catch (error: any) {
    console.error('Get user teams error:', error.message);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥'
    });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
router.post('/create', async (req, res) => {
  try {
    const userId = (req.session as any).userId;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    const { name, tag } = req.body;

    if (!name || !tag) {
      return res.status(400).json({
        success: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–µ–≥ –∫–æ–º–∞–Ω–¥—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    if (name.length < 3 || name.length > 20) {
      return res.status(400).json({
        success: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤'
      });
    }

    if (tag.length < 2 || tag.length > 5) {
      return res.status(400).json({
        success: false,
        error: '–¢–µ–≥ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 5 —Å–∏–º–≤–æ–ª–æ–≤'
      });
    }

    const team = await TeamService.createTeam(name, tag, userId);
    
    console.log('‚úÖ Team created:', team.name);

    res.status(201).json({
      success: true,
      message: '–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
      team
    });
  } catch (error: any) {
    console.error('Create team error:', error.message);
    res.status(400).json({
      success: false,
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ (–í–ê–ñ–ù–û: –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–ï–†–ï–î /:teamId!)
router.get('/all', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const userId = (req.session as any).userId;
    console.log('üì° GET /api/teams/all - userId:', userId);
    
    let teams = [];

    if (userId) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∫–æ–º–∞–Ω–¥—ã
      console.log('üîê User authenticated, fetching teams for user:', userId);
      teams = await TeamService.getUserTeams(userId);
      console.log(`üì¶ Fetched ${teams.length} teams for user`);
    } else {
      // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.log('‚ö†Ô∏è User not authenticated, returning test data');
      teams = [
        {
          id: 'team_1',
          name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ 1',
          tag: 'TEST1',
          status: 'active',
          members: [
            {
              id: 'member_1',
              username: 'testuser1',
              role: 'captain',
              steamUsername: 'TestPlayer1'
            }
          ]
        },
        {
          id: 'team_2', 
          name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ 2',
          tag: 'TEST2',
          status: 'active',
          members: [
            {
              id: 'member_2',
              username: 'testuser2', 
              role: 'captain',
              steamUsername: 'TestPlayer2'
            }
          ]
        }
      ];
    }

    console.log(`‚úÖ Sending response with ${teams.length} teams`);
    res.json({
      success: true,
      teams: teams
    });
  } catch (error: any) {
    console.error('‚ùå Get all teams error:', error.message);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥',
      teams: [] // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–û–°–õ–ï–î–ù–ò–ú - –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤!)
router.get('/:teamId', async (req, res) => {
  try {
    const { teamId } = req.params;
    const userId = (req.session as any).userId;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    console.log(`üîç Getting team details for teamId: ${teamId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
    const team = await TeamRepository.findTeamById(teamId);
    
    if (!team) {
      console.log(`‚ùå Team not found: ${teamId}`);
      return res.status(404).json({
        success: false,
        error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    console.log(`‚úÖ Found team: ${team.name} with ${team.members?.length || 0} members`);
    
    res.json({
      success: true,
      team: team
    });
  } catch (error: any) {
    console.error('Get team error:', error.message);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–∑–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É
router.get('/:teamId/inviteable-friends', async (req, res) => {
  try {
    console.log('üîç GET /api/teams/:teamId/inviteable-friends - Request received');
    
    const userId = (req.session as any).userId;
    console.log('üë§ User ID from session:', userId);
    
    if (!userId) {
      console.log('‚ùå No user ID in session');
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    const { teamId } = req.params;
    console.log('üéØ Team ID:', teamId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã
    console.log('üîç Loading team details...');
    const team = await TeamRepository.findTeamById(teamId);
    console.log('üìä Team loaded:', team ? { id: team.id, name: team.name, membersCount: team.members?.length } : 'null');
    
    if (!team) {
      console.log('‚ùå Team not found');
      return res.status(404).json({
        success: false,
        error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    const captain = team.members.find((m: any) => m.role === 'captain');
    console.log('üëë Captain check:', { captainUserId: captain?.userId, currentUserId: userId, isCaptain: captain?.userId === userId });
    
    if (!captain || captain.userId !== userId) {
      console.log('‚ùå User is not captain');
      return res.status(403).json({
        success: false,
        error: '–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë• Loading friends...');
    const friends = await FriendsService.getFriends(userId);
    console.log('üìä All friends:', friends.length, friends.map(f => ({ username: f.friendUsername, steamId: f.friendSteamId })));

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ
    const teamMemberIds = team.members.map((m: any) => m.userId);
    console.log('üë• Team member IDs:', teamMemberIds);
    
    const inviteableFriends = friends.filter(friend => 
      !teamMemberIds.includes(friend.friendId) && 
      friend.friendSteamId // –£ –¥—Ä—É–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Steam –∞–∫–∫–∞—É–Ω—Ç
    );
    
    console.log('‚úÖ Inviteable friends:', inviteableFriends.length, inviteableFriends.map(f => f.friendUsername));

    res.json({
      success: true,
      friends: inviteableFriends
    });
  } catch (error: any) {
    console.error('‚ùå Get inviteable friends error:', error.message);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π'
    });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
router.delete('/:teamId', async (req, res) => {
  try {
    const { teamId } = req.params;
    const userId = (req.session as any).userId;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    console.log(`üóëÔ∏è Deleting team ${teamId} by user ${userId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const team = await TeamRepository.findTeamById(teamId);
    if (!team) {
      return res.status(404).json({
        success: false,
        error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã
    const captain = team.members.find((m: any) => m.role === 'captain');
    if (!captain || captain.userId !== userId) {
      return res.status(403).json({
        success: false,
        error: '–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É'
      });
    }

    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ foreign key)
    await TeamRepository.deleteTeam(teamId);

    console.log(`‚úÖ Team ${teamId} deleted successfully`);

    res.json({
      success: true,
      message: '–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    });
  } catch (error: any) {
    console.error('Delete team error:', error.message);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã'
    });
  }
});

// –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω)
router.delete('/:teamId/members/:memberId', async (req, res) => {
  try {
    const { teamId, memberId } = req.params;
    const userId = (req.session as any).userId;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    console.log(`üóëÔ∏è Removing member ${memberId} from team ${teamId} by user ${userId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const team = await TeamRepository.findTeamById(teamId);
    if (!team) {
      return res.status(404).json({
        success: false,
        error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã
    const captain = team.members.find((m: any) => m.role === 'captain');
    if (!captain || captain.userId !== userId) {
      return res.status(403).json({
        success: false,
        error: '–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–º–∞–Ω–¥–µ
    const member = team.members.find((m: any) => m.id === memberId);
    if (!member) {
      return res.status(404).json({
        success: false,
        error: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ'
      });
    }

    // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–∞
    if (member.role === 'captain') {
      return res.status(403).json({
        success: false,
        error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã'
      });
    }

    // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    await TeamRepository.removeTeamMember(teamId, memberId, userId);

    console.log(`‚úÖ Member ${memberId} removed from team ${teamId} successfully`);

    res.json({
      success: true,
      message: '–ò–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã'
    });
  } catch (error: any) {
    console.error('Remove team member error:', error.message);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã'
    });
  }
});

export default router;