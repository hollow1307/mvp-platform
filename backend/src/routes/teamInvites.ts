import express from 'express';
import { TeamInvitesService } from '../services/teamInvitesService';

const router = express.Router();

// –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É
router.post('/invite', async (req, res) => {
  try {
    console.log('üì® POST /api/team-invites/invite - Request received');
    console.log('üì¶ Request body:', req.body);
    
    const userId = (req.session as any).userId;
    console.log('üë§ User ID from session:', userId);
    
    if (!userId) {
      console.log('‚ùå No user ID in session');
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    const { teamId, invitedUserId } = req.body;
    console.log('üéØ Invite params:', { teamId, invitedUserId, inviterUserId: userId });

    if (!teamId || !invitedUserId) {
      console.log('‚ùå Missing required parameters');
      return res.status(400).json({
        success: false,
        error: 'teamId –∏ invitedUserId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    console.log('üîÑ Calling TeamInvitesService.invitePlayerToTeam...');
    const invite = await TeamInvitesService.invitePlayerToTeam(teamId, invitedUserId, userId);
    console.log('‚úÖ Invite created:', invite);

    res.json({
      success: true,
      message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      invite
    });
  } catch (error: any) {
    console.error('‚ùå Error in invite endpoint:', error.message);
    res.status(400).json({
      success: false,
      error: error.message
    });
  }
});

// –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
router.post('/:inviteId/accept', async (req, res) => {
  try {
    const userId = (req.session as any).userId;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    const { inviteId } = req.params;

    await TeamInvitesService.acceptTeamInvite(userId, inviteId);

    res.json({
      success: true,
      message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–∞–Ω–¥—É'
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      error: error.message
    });
  }
});

// –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
router.post('/:inviteId/reject', async (req, res) => {
  try {
    const userId = (req.session as any).userId;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    const { inviteId } = req.params;

    await TeamInvitesService.rejectTeamInvite(userId, inviteId);

    res.json({
      success: true,
      message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
router.get('/my-invites', async (req, res) => {
  try {
    console.log('üì¨ GET /api/team-invites/my-invites - Request received');
    
    const userId = (req.session as any).userId;
    console.log('üë§ User ID from session:', userId);
    
    if (!userId) {
      console.log('‚ùå No user ID in session');
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    console.log('üîç Loading user invites...');
    const invites = await TeamInvitesService.getUserInvites(userId);
    console.log('üìä Found invites:', invites.length, invites.map(i => ({ id: i.id, teamName: i.teamName, status: i.status })));

    res.json({
      success: true,
      invites
    });
  } catch (error: any) {
    console.error('‚ùå Error loading invites:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (–¥–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞)
router.get('/team/:teamId', async (req, res) => {
  try {
    const userId = (req.session as any).userId;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    const { teamId } = req.params;

    const invites = await TeamInvitesService.getTeamInvites(teamId, userId);

    res.json({
      success: true,
      invites
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      error: error.message
    });
  }
});

// –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–¥–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞)
router.delete('/:inviteId', async (req, res) => {
  try {
    const userId = (req.session as any).userId;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    const { inviteId } = req.params;

    await TeamInvitesService.cancelTeamInvite(inviteId, userId);

    res.json({
      success: true,
      message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
    });
  } catch (error: any) {
    res.status(400).json({
      success: false,
      error: error.message
    });
  }
});

export default router;
