import express from 'express';
import { Tournament, Team } from '../models/tournament';

const router = express.Router();

// –õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è –ª–æ–±–±–∏
function generateLobbyPassword(): string {
  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
  let password = '';
  for (let i = 0; i < 6; i++) {
    password += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return password;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—à–∞–≥–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
function generateLobbyInstructions(lobbyName: string, password: string, match: any): string[] {
  return [
    'üéÆ –®–ê–ì 1: –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å Dota 2" –Ω–∏–∂–µ',
    'üìã –®–ê–ì 2: –í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ "Play Dota" ‚Üí "Lobby" ‚Üí "Create Lobby"',
    `üè∑Ô∏è  –®–ê–ì 3: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–±–±–∏: "${lobbyName}"`,
    `üîë –®–ê–ì 4: –ü–∞—Ä–æ–ª—å –ª–æ–±–±–∏: "${password}"`,
    '‚öôÔ∏è  –®–ê–ì 5: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏:',
    '   ‚Ä¢ –†–µ–∂–∏–º –∏–≥—Ä—ã: Captains Mode',
    '   ‚Ä¢ –†–µ–≥–∏–æ–Ω —Å–µ—Ä–≤–µ—Ä–∞: Europe', 
    '   ‚Ä¢ –ó—Ä–∏—Ç–µ–ª–∏: –†–∞–∑—Ä–µ—à–µ–Ω—ã',
    '   ‚Ä¢ –ü–∞—É–∑—ã: –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π',
    'üë• –®–ê–ì 6: –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞',
    'üë• –®–ê–ì 7: –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã',
    '‚úÖ –®–ê–ì 8: –ù–∞—á–Ω–∏—Ç–µ –º–∞—Ç—á –∫–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤—ã'
  ];
}

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
let tournaments: Tournament[] = [];
let teams: Team[] = [];
let brackets: any[] = [];
let lobbies: any[] = [];

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã
router.get('/', (req, res) => {
  try {
    const { status } = req.query;

    let filteredTournaments = tournaments;

    if (status) {
      filteredTournaments = filteredTournaments.filter(t => t.status === status);
    }

    res.json({
      success: true,
      tournaments: filteredTournaments.map(t => ({
        ...t,
        canRegister: t.status === 'registration' && t.currentTeams < t.maxTeams
      }))
    });
  } catch (error: any) {
    console.error('Get tournaments error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch tournaments'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä –ø–æ ID
router.get('/:id', (req, res) => {
  try {
    const { id } = req.params;
    const tournament = tournaments.find(t => t.id === id);

    if (!tournament) {
      return res.status(404).json({
        success: false,
        error: 'Tournament not found'
      });
    }

    const tournamentTeams = teams.filter(t => t.tournamentId === id);

    res.json({
      success: true,
      tournament: {
        ...tournament,
        teams: tournamentTeams
      }
    });
  } catch (error: any) {
    console.error('Get tournament error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch tournament'
    });
  }
});

// –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
router.post('/', async (req, res) => {
  try {
    const userId = (req.session as any).userId;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Steam –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
    const { UserService } = await import('../services/userService');
    const user = await UserService.getUserWithConnections(userId);
    
    if (!user || !user.steamConnections || user.steamConnections.length === 0) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å Steam –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞'
      });
    }

    const steamConnection = user.steamConnections[0];

    const {
      name,
      description,
      maxTeams,
      registrationEnd,
      tournamentStart
    } = req.body;

    const newTournament: Tournament = {
      id: `tournament_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      name,
      description,
      organizerId: steamConnection.steamId,
      maxTeams: maxTeams || 16,
      currentTeams: 0,
      status: 'registration',
      rules: {
        maxMMR: 4000, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è MVP
        minMatches: 100,
        format: 'single-elimination', // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ
        matchRules: {
          seriesType: 'bo1', // –í—Å–µ –º–∞—Ç—á–∏ BO1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          finalSeriesType: 'bo3', // –§–∏–Ω–∞–ª BO3
          allowTies: false
        }
      },
      schedule: {
        registrationStart: new Date(),
        registrationEnd: new Date(registrationEnd),
        tournamentStart: new Date(tournamentStart),
        checkinTime: new Date(new Date(tournamentStart).getTime() - 30 * 60 * 1000) // –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞
      },
      createdAt: new Date(),
      updatedAt: new Date()
    };

    tournaments.push(newTournament);

    console.log(`üéØ Tournament created: ${name} by ${steamConnection.steamUsername}`);

    res.status(201).json({
      success: true,
      tournament: newTournament
    });
  } catch (error: any) {
    console.error('Create tournament error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to create tournament'
    });
  }
});

// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ç—É—Ä–Ω–∏—Ä–µ
router.post('/:id/register', async (req, res) => {
  try {
    const userId = (req.session as any).userId;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    const { id } = req.params;
    const { teamId } = req.body;

    console.log(`üéØ Registering team ${teamId} for tournament ${id} by user ${userId}`);

    // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    const tournament = tournaments.find(t => t.id === id);
    if (!tournament) {
      return res.status(404).json({
        success: false,
        error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    if (tournament.status !== 'registration') {
      return res.status(400).json({
        success: false,
        error: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä –∑–∞–∫—Ä—ã—Ç–∞'
      });
    }

    if (tournament.currentTeams >= tournament.maxTeams) {
      return res.status(400).json({
        success: false,
        error: '–¢—É—Ä–Ω–∏—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { TeamRepository } = await import('../repositories/teamRepository');
    const team = await TeamRepository.findTeamById(teamId);
    
    if (!team) {
      return res.status(404).json({
        success: false,
        error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã
    const captain = team.members.find((m: any) => m.role === 'captain');
    if (!captain || captain.userId !== userId) {
      return res.status(403).json({
        success: false,
        error: '–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ç—É—Ä–Ω–∏—Ä–µ'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    if (team.members.length < 2) {
      return res.status(400).json({
        success: false,
        error: '–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–æ–≤'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    const existingRegistration = teams.find(t => t.tournamentId === id && t.name === team.name);
    if (existingRegistration) {
      return res.status(400).json({
        success: false,
        error: '–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã –∏–º–µ—é—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ Steam –∞–∫–∫–∞—É–Ω—Ç—ã
    const membersWithoutSteam = team.members.filter((member: any) => !member.steamUsername);
    if (membersWithoutSteam.length > 0) {
      return res.status(400).json({
        success: false,
        error: '–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ Steam –∞–∫–∫–∞—É–Ω—Ç—ã'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–∞–ø–∏—Ç–∞–Ω–∞ –µ—Å—Ç—å Steam username
    if (!captain.steamUsername) {
      return res.status(400).json({
        success: false,
        error: '–£ –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω Steam –∞–∫–∫–∞—É–Ω—Ç'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã
    const tournamentTeam: Team = {
      id: `tournament_team_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      name: team.name,
      tag: team.tag,
      captainId: captain.steamUsername, // –¢–µ–ø–µ—Ä—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—Ç—Ä–æ–∫–∞
      players: team.members.map((member: any) => ({
        steamId: member.steamUsername || '', // Fallback –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        username: member.username,
        avatar: '', // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–∑–∂–µ
        isCaptain: member.role === 'captain',
        joinDate: new Date()
      })),
      tournamentId: id,
      joinedAt: new Date(),
      status: 'registered'
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ç—É—Ä–Ω–∏—Ä
    teams.push(tournamentTeam);
    tournament.currentTeams++;

    console.log(`‚úÖ Team registered: ${team.name} for tournament ${tournament.name}`);

    res.status(201).json({
      success: true,
      message: '–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ',
      team: tournamentTeam,
      tournament: {
        ...tournament,
        canRegister: tournament.currentTeams < tournament.maxTeams
      }
    });
  } catch (error: any) {
    console.error('Register team error:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞
router.get('/:id/teams', (req, res) => {
  try {
    const { id } = req.params;
    const tournamentTeams = teams.filter(t => t.tournamentId === id);

    res.json({
      success: true,
      teams: tournamentTeams
    });
  } catch (error: any) {
    console.error('Get teams error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch teams'
    });
  }
});

// –í—Ä–µ–º–µ–Ω–Ω—ã–π endpoint –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
router.post('/:id/start-registration', (req, res) => {
  try {
    const { id } = req.params;
    const tournament = tournaments.find(t => t.id === id);

    if (!tournament) {
      return res.status(404).json({ success: false, error: 'Tournament not found' });
    }

    tournament.status = 'registration';
    tournament.updatedAt = new Date();

    console.log(`üéØ Tournament ${tournament.name} status changed to: registration`);

    res.json({
      success: true,
      tournament: tournament
    });
  } catch (error: any) {
    console.error('Start registration error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to start registration'
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –º–∞—Ç—á–∞ –ø–æ —Ä–∞—É–Ω–¥—É
const getMatchSeriesType = (tournament: Tournament, round: number, totalRounds: number): 'bo1' | 'bo3' => {
  // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ - BO3
  if (round === totalRounds) {
    return tournament.rules.matchRules.finalSeriesType as 'bo3';
  }
  // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ - BO1
  return tournament.rules.matchRules.seriesType as 'bo1';
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø)
router.post('/:id/generate-bracket', (req, res) => {
  try {
    const { id } = req.params;
    const tournament = tournaments.find(t => t.id === id);

    if (!tournament) {
      return res.status(404).json({
        success: false,
        error: 'Tournament not found'
      });
    }

    if (tournament.status !== 'registration') {
      return res.status(400).json({
        success: false,
        error: 'Can only generate bracket for tournaments in registration'
      });
    }

    const tournamentTeams = teams.filter(t => t.tournamentId === id);

    if (tournamentTeams.length < 2) {
      return res.status(400).json({
        success: false,
        error: 'Need at least 2 teams to generate bracket'
      });
    }

    // –£–î–ê–õ–Ø–ï–ú –°–¢–ê–†–£–Æ –°–ï–¢–ö–£ –ï–°–õ–ò –ï–°–¢–¨
    const existingBracketIndex = brackets.findIndex(b => b.tournamentId === id);
    if (existingBracketIndex !== -1) {
      brackets.splice(existingBracketIndex, 1);
    }

    // –ì–ï–ù–ï–†–ê–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ï–¢–ö–ò
    const bracket = generateRealBracket(tournament, tournamentTeams);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ç–∫—É
    brackets.push(bracket);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
    tournament.status = 'ongoing';
    tournament.updatedAt = new Date();

    console.log(`üéØ Real bracket generated for tournament: ${tournament.name} with ${tournamentTeams.length} teams`);
    console.log(`üìä Bracket details: ${bracket.rounds.length} rounds, ${bracket.matches.length} matches`);

    res.json({
      success: true,
      bracket: bracket,
      tournament: tournament
    });
  } catch (error: any) {
    console.error('Generate bracket error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to generate bracket'
    });
  }
});

// –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏
const generateRealBracket = (tournament: Tournament, teams: Team[]) => {
  const teamCount = teams.length;
  const rounds = Math.ceil(Math.log2(teamCount));

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –¥–ª—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏
  const shuffledTeams = [...teams].sort(() => Math.random() - 0.5);

  const bracket = {
    id: `bracket_${tournament.id}_${Date.now()}`,
    tournamentId: tournament.id,
    rounds: Array.from({ length: rounds }, (_, i) => i + 1),
    matches: [] as any[],
    createdAt: new Date(),
    updatedAt: new Date()
  };

  // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–∞—É–Ω–¥–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
  const matchesByRound: { [round: number]: any[] } = {};

  // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞
  for (let round = 1; round <= rounds; round++) {
    const matchesInRound = Math.ceil(teamCount / Math.pow(2, round));
    matchesByRound[round] = [];

    for (let i = 1; i <= matchesInRound; i++) {
      const match: any = {
        id: `match_${tournament.id}_r${round}_m${i}`,
        tournamentId: tournament.id,
        round: round,
        position: i,
        teamA: null,
        teamB: null,
        winnerId: null,
        nextMatchId: null, // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á
        status: 'scheduled' as const,
        seriesType: getMatchSeriesType(tournament, round, rounds),
        games: [],
        createdAt: new Date(),
        updatedAt: new Date()
      };

      // –î–ª—è –≤—Å–µ—Ö —Ä–∞—É–Ω–¥–æ–≤ –∫—Ä–æ–º–µ —Ñ–∏–Ω–∞–ª–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –º–∞—Ç—á–µ–º
      if (round < rounds) {
        const nextRound = round + 1;
        const nextMatchPosition = Math.ceil(i / 2);
        match.nextMatchId = `match_${tournament.id}_r${nextRound}_m${nextMatchPosition}`;
      }

      matchesByRound[round].push(match);
      bracket.matches.push(match);
    }
  }

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥–∞–º–∏ –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥
  const firstRoundMatches = matchesByRound[1];
  for (let i = 0; i < firstRoundMatches.length; i++) {
    const match = firstRoundMatches[i];
    const teamAIndex = i * 2;
    const teamBIndex = i * 2 + 1;

    if (teamAIndex < shuffledTeams.length) {
      const teamA = shuffledTeams[teamAIndex];
      match.teamA = {
        id: teamA.id,
        name: teamA.name,
        tag: teamA.tag,
        players: teamA.players
      };
    }

    if (teamBIndex < shuffledTeams.length) {
      const teamB = shuffledTeams[teamBIndex];
      match.teamB = {
        id: teamB.id,
        name: teamB.name,
        tag: teamB.tag,
        players: teamB.players
      };
    }

    // –ï—Å–ª–∏ –æ–±–∞ —Å–ª–æ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –º–∞—Ç—á –≥–æ—Ç–æ–≤ –∫ –Ω–∞—á–∞–ª—É
    if (match.teamA && match.teamB) {
      match.status = 'scheduled';
    }
  }

  console.log(`üéØ Generated bracket with ${bracket.matches.length} matches across ${rounds} rounds`);

  return bracket;
};

// –ü–æ–ª—É—á–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô)
router.get('/:id/bracket', (req, res) => {
  try {
    const { id } = req.params;
    const tournament = tournaments.find(t => t.id === id);

    if (!tournament) {
      return res.status(404).json({
        success: false,
        error: 'Tournament not found'
      });
    }

    // –ò—â–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Ç–∫—É
    const bracket = brackets.find(b => b.tournamentId === id);

    if (bracket) {
      return res.json({
        success: true,
        bracket: bracket
      });
    }

    // –ï—Å–ª–∏ —Å–µ—Ç–∫–∏ –Ω–µ—Ç –∏ —Ç—É—Ä–Ω–∏—Ä –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (tournament.status === 'registration') {
      return res.json({
        success: true,
        bracket: null,
        message: 'Bracket not generated yet'
      });
    }

    // –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –Ω–∞—á–∞–ª—Å—è, –Ω–æ —Å–µ—Ç–∫–∏ –Ω–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (tournament.status === 'ongoing') {
      const tournamentTeams = teams.filter(t => t.tournamentId === id);
      if (tournamentTeams.length >= 2) {
        console.log(`üîÑ Auto-generating bracket for ongoing tournament: ${tournament.name}`);
        const newBracket = generateRealBracket(tournament, tournamentTeams);
        brackets.push(newBracket);

        return res.json({
          success: true,
          bracket: newBracket
        });
      }
    }

    res.json({
      success: true,
      bracket: null,
      message: 'Bracket not available'
    });
  } catch (error: any) {
    console.error('Get bracket error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch bracket'
    });
  }
});

// –û–ë–ù–û–í–õ–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ú–ê–¢–ß–ê
router.put('/:id/matches/:matchId', (req, res) => {
  try {
    const { id, matchId } = req.params;
    const { winnerId, status } = req.body;

    // –ù–∞—Ö–æ–¥–∏–º —Ç—É—Ä–Ω–∏—Ä –∏ —Å–µ—Ç–∫—É
    const tournament = tournaments.find(t => t.id === id);
    const bracket = brackets.find(b => b.tournamentId === id);

    if (!tournament || !bracket) {
      return res.status(404).json({
        success: false,
        error: 'Tournament or bracket not found'
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç—á
    const match = bracket.matches.find((m: any) => m.id === matchId);
    if (!match) {
      return res.status(404).json({
        success: false,
        error: 'Match not found'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ winnerId - —ç—Ç–æ ID –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥
    if (winnerId && winnerId !== match.teamA?.id && winnerId !== match.teamB?.id) {
      return res.status(400).json({
        success: false,
        error: 'Winner ID must be one of the participating teams'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á
    match.winnerId = winnerId;
    match.status = status || (winnerId ? 'completed' : 'scheduled');
    match.updatedAt = new Date();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á
    if (winnerId && match.nextMatchId) {
      const nextMatch = bracket.matches.find((m: any) => m.id === match.nextMatchId);
      if (nextMatch) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é (teamA –∏–ª–∏ teamB) –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        const winnerTeam = match.teamA?.id === winnerId ? match.teamA : match.teamB;
        if (winnerTeam) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ position —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
          if (match.position % 2 === 1) { // –ù–µ—á–µ—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è -> teamA —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ç—á–∞
            nextMatch.teamA = winnerTeam;
          } else { // –ß–µ—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è -> teamB —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ç—á–∞
            nextMatch.teamB = winnerTeam;
          }

          // –ï—Å–ª–∏ –æ–±–∞ —Å–ª–æ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞ –Ω–∞ scheduled
          if (nextMatch.teamA && nextMatch.teamB && nextMatch.status === 'scheduled') {
            nextMatch.status = 'scheduled';
          }

          console.log(`üéØ Winner ${winnerTeam.name} advanced to match ${nextMatch.id}`);
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ç–∫–∏
    bracket.updatedAt = new Date();

    console.log(`üéØ Match ${matchId} updated: winner ${winnerId}`);

    res.json({
      success: true,
      match: match,
      bracket: bracket
    });
  } catch (error: any) {
    console.error('Update match error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to update match'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ç—á
router.get('/:id/matches/:matchId', (req, res) => {
  try {
    const { id, matchId } = req.params;
    const bracket = brackets.find(b => b.tournamentId === id);

    if (!bracket) {
      return res.status(404).json({
        success: false,
        error: 'Bracket not found'
      });
    }

    const match = bracket.matches.find((m: any) => m.id === matchId);
    if (!match) {
      return res.status(404).json({
        success: false,
        error: 'Match not found'
      });
    }

    res.json({
      success: true,
      match: match
    });
  } catch (error: any) {
    console.error('Get match error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch match'
    });
  }
});

// –ü–†–û–°–¢–û–ô endpoint —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏ - —Ç–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
router.post('/:id/matches/:matchId/create-lobby', async (req, res) => {
  try {
    const { id, matchId } = req.params;

    const userId = (req.session as any).userId;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Steam –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
    const { UserService } = await import('../services/userService');
    const user = await UserService.getUserWithConnections(userId);
    
    if (!user || !user.steamConnections || user.steamConnections.length === 0) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å Steam –∞–∫–∫–∞—É–Ω—Ç'
      });
    }

    const steamConnection = user.steamConnections[0];
    
    const tournament = tournaments.find(t => t.id === id);
    const bracket = brackets.find(b => b.tournamentId === id);

    if (!tournament || !bracket) {
      return res.status(404).json({
        success: false,
        error: 'Tournament or bracket not found'
      });
    }

    const match = bracket.matches.find((m: any) => m.id === matchId);
    if (!match) {
      return res.status(404).json({
        success: false,
        error: 'Match not found'
      });
    }

    if (!match.teamA || !match.teamB) {
      return res.status(400).json({
        success: false,
        error: 'Both teams must be set'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∫–∞–ø–∏—Ç–∞–Ω–æ–º –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥
    const isTeamACaptain = match.teamA.players.some((p: any) => p.steamId === steamConnection.steamId && p.isCaptain);
    const isTeamBCaptain = match.teamB.players.some((p: any) => p.steamId === steamConnection.steamId && p.isCaptain);
    
    if (!isTeamACaptain && !isTeamBCaptain) {
      return res.status(403).json({
        success: false,
        error: 'Only team captains can create lobbies'
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏
    const lobbyPassword = generateLobbyPassword();
    const lobbyName = `MVP: ${match.teamA.tag} vs ${match.teamB.tag} - ${tournament.name}`;

    console.log(`üéÆ Generating lobby instructions for match ${matchId} by captain ${steamConnection.steamUsername}`);

    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ª–æ–±–±–∏
    const lobbyRecord = {
      id: `lobby_${matchId}_${Date.now()}`,
      matchId: matchId,
      tournamentId: id,
      password: lobbyPassword,
      connectUrl: 'steam://run/570', // –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç Dota 2
      createdBy: steamConnection.steamId,
      createdAt: new Date(),
      status: 'manual_creation',
      settings: {
        name: lobbyName,
        gameMode: 'Captains Mode',
        serverRegion: 'Europe',
        seriesType: match.seriesType
      },
      instructions: generateLobbyInstructions(lobbyName, lobbyPassword, match)
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ª–æ–±–±–∏
    const existingLobbyIndex = lobbies.findIndex(l => l.matchId === matchId);
    if (existingLobbyIndex !== -1) {
      lobbies[existingLobbyIndex] = lobbyRecord;
    } else {
      lobbies.push(lobbyRecord);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞
    match.status = 'ongoing';
    match.updatedAt = new Date();

    console.log(`‚úÖ Lobby instructions generated for match ${matchId}`);

    res.json({
      success: true,
      lobby: lobbyRecord,
      message: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏ –≥–æ—Ç–æ–≤—ã!'
    });

  } catch (error: any) {
    console.error('Create lobby error:', error);
    
    res.status(500).json({
      success: false,
      error: 'Failed to generate lobby instructions: ' + error.message
    });
  }
});

export default router;